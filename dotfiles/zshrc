# vim:fdm=marker
DOT_DIR="${HOME}/user-config/dotfiles"
ZGEN_FILE="${DOT_DIR}/zgen/zgen.zsh"

## History
HISTFILE=$HOME/.zhistory       # enable history saving on shell exit
setopt APPEND_HISTORY          # append rather than overwrite history file.
HISTSIZE=1200                  # lines of history to maintain memory
SAVEHIST=1000                  # lines of history to maintain in history file.
setopt HIST_EXPIRE_DUPS_FIRST  # allow dups, but expire old ones when I hit HISTSIZE
setopt EXTENDED_HISTORY        # save timestamp and runtime information
setopt hist_ignore_space
setopt HIST_IGNORE_DUPS
setopt hist_ignore_all_dups
setopt share_history

if [[ "$TERM" == 'dumb' ]]; then
    return 0
    fi

autoload -U is-at-least

lazy_source () {
    eval "$1 () { [ -f $2 ] && source $2 && $1 \$@ }"
}

# autoload -U compinit && compinit


# Load and initialize the completion system ignoring insecure directories.
autoload -Uz compinit && compinit -i

function setup_completion() { # {{{
    #
    # Sets completion options.
    #
    # Authors:
    #   Robby Russell <robby@planetargon.com>
    #   Sorin Ionescu <sorin.ionescu@gmail.com>
    #

    # Return if requirements are not found.
    if [[ "$TERM" == 'dumb' ]]; then
        return 1
    fi

    # Add zsh-completions to $fpath.
    # fpath=("${0:h}/external/src" $fpath)


    #
    # Options
    #

    setopt COMPLETE_IN_WORD    # Complete from both ends of a word.
    setopt ALWAYS_TO_END       # Move cursor to the end of a completed word.
    setopt PATH_DIRS           # Perform path search even on command names with slashes.
    setopt AUTO_MENU           # Show completion menu on a successive tab press.
    setopt AUTO_LIST           # Automatically list choices on ambiguous completion.
    setopt AUTO_PARAM_SLASH    # If completed parameter is a directory, add a trailing slash.
    unsetopt MENU_COMPLETE     # Do not autoselect the first completion entry.
    unsetopt FLOW_CONTROL      # Disable start/stop characters in shell editor.

    #
    # Styles
    #

    # Use caching to make completion for commands such as dpkg and apt usable.
    zstyle ':completion::complete:*' use-cache on
    zstyle ':completion::complete:*' cache-path "${ZDOTDIR:-$HOME}/.zcompcache"

    # Case-insensitive (all), partial-word, and then substring completion.
    if zstyle -t ':prezto:module:completion:*' case-sensitive; then
        zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
        setopt CASE_GLOB
    else
        zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
        unsetopt CASE_GLOB
    fi

    # Group matches and describe.
    zstyle ':completion:*:*:*:*:*' menu select
    zstyle ':completion:*:matches' group 'yes'
    zstyle ':completion:*:options' description 'yes'
    zstyle ':completion:*:options' auto-description '%d'
    zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
    zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
    zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
    zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
    zstyle ':completion:*:default' list-prompt '%S%M matches%s'
    zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
    zstyle ':completion:*' group-name ''
    zstyle ':completion:*' verbose yes

    # Fuzzy match mistyped completions.
    zstyle ':completion:*' completer _complete _match _approximate
    zstyle ':completion:*:match:*' original only
    zstyle ':completion:*:approximate:*' max-errors 1 numeric

    # Increase the number of errors based on the length of the typed word.
    zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3))numeric)'

    # Don't complete unavailable commands.
    zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

    # Array completion element sorting.
    zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

    # Directories
    zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
    zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
    zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
    zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
    zstyle ':completion:*' squeeze-slashes true

    # History
    zstyle ':completion:*:history-words' stop yes
    zstyle ':completion:*:history-words' remove-all-dups yes
    zstyle ':completion:*:history-words' list false
    zstyle ':completion:*:history-words' menu yes

    # Environmental Variables
    zstyle ':completion::*:(-command-|export):*' fake-parameters ${${${_comps[(I)-value-*]#*,}%%,*}:#-*-}

    # Populate hostname completion.
    zstyle -e ':completion:*:hosts' hosts 'reply=(
  ${=${=${=${${(f)"$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) 2>/dev/null)"}%%[#| ]*}//\]:[0-9]*/ }//,/ }//\[/ }
  ${=${(f)"$(cat /etc/hosts(|)(N) <<(ypcat hosts 2>/dev/null))"}%%\#*}
  ${=${${${${(@M)${(f)"$(cat ~/.ssh/config 2>/dev/null)"}:#Host *}#Host }:#*\**}:#*\?*}}
)'

    # Don't complete uninteresting users...
    zstyle ':completion:*:*:*:users' ignored-patterns \
           adm amanda apache avahi beaglidx bin cacti canna clamav daemon \
           dbus distcache dovecot fax ftp games gdm gkrellmd gopher \
           hacluster haldaemon halt hsqldb ident junkbust ldap lp mail \
           mailman mailnull mldonkey mysql nagios \
           named netdump news nfsnobody nobody nscd ntp nut nx openvpn \
           operator pcap postfix postgres privoxy pulse pvm quagga radvd \
           rpc rpcuser rpm shutdown squid sshd sync uucp vcsa xfs '_*'

    # ... unless we really want to.
    zstyle '*' single-ignored show

    # Ignore multiple entries.
    zstyle ':completion:*:(rm|kill|diff):*' ignore-line other
    zstyle ':completion:*:rm:*' file-patterns '*:all-files'

    # Kill
    zstyle ':completion:*:*:*:*:processes' command 'ps -u $LOGNAME -o pid,user,command -w'
    zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;36=0=01'
    zstyle ':completion:*:*:kill:*' menu yes select
    zstyle ':completion:*:*:kill:*' force-list always
    zstyle ':completion:*:*:kill:*' insert-ids single

    # Man
    zstyle ':completion:*:manuals' separate-sections true
    zstyle ':completion:*:manuals.(^1*)' insert-sections true

    # Media Players
    zstyle ':completion:*:*:mpg123:*' file-patterns '*.(mp3|MP3):mp3\ files *(-/):directories'
    zstyle ':completion:*:*:mpg321:*' file-patterns '*.(mp3|MP3):mp3\ files *(-/):directories'
    zstyle ':completion:*:*:ogg123:*' file-patterns '*.(ogg|OGG|flac):ogg\ files *(-/):directories'
    zstyle ':completion:*:*:mocp:*' file-patterns '*.(wav|WAV|mp3|MP3|ogg|OGG|flac):ogg\ files *(-/):directories'

    # Mutt
    if [[ -s "$HOME/.mutt/aliases" ]]; then
        zstyle ':completion:*:*:mutt:*' menu yes select
        zstyle ':completion:*:mutt:*' users ${${${(f)"$(<"$HOME/.mutt/aliases")"}#alias[[:space:]]}%%[[:space:]]*}
    fi

    # SSH/SCP/RSYNC
    zstyle ':completion:*:(scp|rsync):*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
    zstyle ':completion:*:(scp|rsync):*' group-order users files all-files hosts-domain hosts-host hosts-ipaddr
    zstyle ':completion:*:ssh:*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
    zstyle ':completion:*:ssh:*' group-order users hosts-domain hosts-host users hosts-ipaddr
    zstyle ':completion:*:(ssh|scp|rsync):*:hosts-host' ignored-patterns '*(.|:)*' loopback ip6-loopback localhost ip6-localhost broadcasthost
    zstyle ':completion:*:(ssh|scp|rsync):*:hosts-domain' ignored-patterns '<->.<->.<->.<->' '^[-[:alnum:]]##(.[-[:alnum:]]##)##' '*@*'
    zstyle ':completion:*:(ssh|scp|rsync):*:hosts-ipaddr' ignored-patterns '^(<->.<->.<->.<->|(|::)([[:xdigit:].]##:(#c,2))##(|%*))' '127.0.0.<->' '255.255.255.255' '::1' 'fe80::*'
}
#}}}


# export BASE16_THEME=bright
export BASE16_THEME=monokai

ZSH_CACHE_DIR=~/.zgen/cache
if source "$HOME/.zgen/init.zsh"; then
    lazy_source zgen "$ZGEN_FILE"
    # zgen() {
    #   if [[ -r "$ZGEN_FILE" ]]; then
    #      # ZGEN_RESET_ON_CHANGE=("${HOME}/.zshrc" "${HOME}/.profile" "${HOME}/.profile.local")
    #      source "$ZGEN_FILE" >/dev/null && zgen "$@"
    #   fi
    # }
else
    source "$ZGEN_FILE"
    mkdir -p "$ZSH_CACHE_DIR" 2>/dev/null
    #  Register plugins
    zgen init

    # zsh-users/zsh-completions src
    zgen loadall <<PLUGINS
      robbyrussell/oh-my-zsh plugins/fasd
      robbyrussell/oh-my-zsh plugins/osx
      robbyrussell/oh-my-zsh plugins/heroku
      robbyrussell/oh-my-zsh plugins/docker
      robbyrussell/oh-my-zsh plugins/brew
      robbyrussell/oh-my-zsh plugins/colored-man-pages
      robbyrussell/oh-my-zsh plugins/common-aliases
      robbyrussell/oh-my-zsh plugins/git

      rimraf/k
      chrissicool/zsh-256color
      zsh-users/zsh-completions src
      chriskempson/base16-shell base16-$BASE16_THEME.dark.sh
      zsh-users/zsh-history-substring-search
      zsh-users/zsh-syntax-highlighting
      tarruda/zsh-autosuggestions
      mafredri/zsh-async
      sindresorhus/pure
PLUGINS
    zgen save
    zgen apply
fi

# Enable autosuggestions automatically.
zle-line-init() {
    zle autosuggest-start
}

bindkey -e

zmodload zsh/terminfo
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down

# bind UP and DOWN arrow keys (compatibility fallback
# for Ubuntu 12.04, Fedora 21, and MacOSX 10.9 users)
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# bind P and N for EMACS mode
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
bindkey -M emacs '^w' backward-kill-word
bindkey -M emacs '^b' autosuggest-execute-suggestion

zle -N zle-line-init

autoload -U select-word-style
select-word-style bash
# zmodload -i zsh/complist

[ -f ~/.fzf.zsh ] && {
    source ~/.fzf.zsh
    export FZF_DEFAULT_COMMAND='ag -g ""'
    export FZF_COMPLETION_TRIGGER=''
    bindkey '^T' fzf-completion
    bindkey '^I' $fzf_default_completion
}

alias o='a -e open'
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

alias gau="ga -u"
alias sl=ls
alias grepi="grep -i"
alias pro="vim +'Prosession getcwd()'"

# Customize to your needs...
dash() { open "dash://$(echo "$*" | tr -d ' ')"; }

# vim/editor config {{{
alias vim=nvim
alias :e=vim
export EDITOR=nvim
export VISUAL=nvim
# }}}

test -n "$NVIM_LISTEN_ADDRESS" && {
    alias nvim="~/user-config/scripts/nvas"
    alias ncd="~/user-config/scripts/ncd"
}

# Go variables {{{
export GOPATH=$HOME/Workspace/golang
export GOBIN=$GOPATH/bin
path+=( $GOBIN )
# }}}

# multirust {{{
path+=(
    "/usr/local/sbin"
    "/Users/ashkan/.multirust/bin"
    "/Users/ashkan/.multirust/cargo/bin"
    "/Users/ashkan/.multirust/toolchains/nightly/cargo/bin"
    "/Users/ashkan/.multirust/toolchains/stable/cargo/bin"
)
# }}}

# Zsh settings config {{{
unsetopt CORRECT
setopt CLOBBER
unsetopt HIST_VERIFY
setopt autocd
# }}}

# TODO.txt {{{
export TODOTXT_DEFAULT_ACTION=ls
alias t='todo.sh -d ~/.todo/config'
# }}}

# Path extras {{{
path+=( $HOME/Workspace/bin )
test -e /opt/local/bin && path+=/opt/local/bin
# }}}

test $(uname) = "Linux" && alias ls='ls --color'
test $(uname) = "Darwin" && alias ls='ls -G'

function chpwd() {
    emulate -L zsh
    ls
    # dirn=${PWD##*/}
    # test -e "$WORKON_HOME/$dirn" && workon "$dirn"
    test -f .zsh && source .zsh
}

alias http-serve='python3 -m http.server'
test $+commands[rmtrash] -ne 0 && alias rm=rmtrash
alias l1="ls -1"
# export COLORTERM=xterm-256color

# Megashares client
msc() {
    curl -g -C - -O "$(megashares-client "$@")"
}

th() {
  if test $+command[th] -eq 0; then
    . /Users/ashkan/torch/install/bin/torch-activate
  fi
  command th "$@"
}


# (mk)virtualenv {{{
# source /usr/local/bin/virtualenvwrapper_lazy.sh
workon() {
    source $WORKON_HOME/$1/bin/activate
}

mkv() {
    test -z "$1" && {
        echo "Usage: mkv <directory>"
        return
    }
    mkvirtualenv "$1"
    cat <<EOF > ~/.virtualenvs/$1/bin/postactivate
#!/usr/bin/env zsh
cd $PWD/$1
EOF
}

# export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx

export WORKON_HOME=$HOME/.virtualenvs
# }}}

# # Base16 Shell
# BASE16_SCHEME="default"
# BASE16_SHELL="$HOME/.config/base16-shell/base16-$BASE16_SCHEME.dark.sh"
# [[ -s $BASE16_SHELL ]] && . $BASE16_SHELL

# path=( $^path(N) )

setup_completion
